FROM nvcr.io/nvidia/pytorch:20.07-py3

RUN rm -f /etc/apt/sources.list.d/*
ENV LANG=C.UTF-8 LC_ALL=C.UTF-8

RUN mkdir -p /etc/pedl/conda.d
RUN mkdir -p /var/run/sshd
RUN apt-get update \
	&& DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
		autoconf \
		automake \
		autotools-dev \
		build-essential \
		ca-certificates \
		curl \
		libkrb5-dev \
		libssl-dev \
		libtool \
		git \
		krb5-user \
		cmake \
		g++-4.8 \
		libnccl-dev \
		libnccl2 \
		make \
		openssh-client \
		openssh-server \
		pkg-config \
		wget \
	&& rm -rf /var/lib/apt/lists/*


RUN apt-get update -y && echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
RUN apt-get install apt-transport-https ca-certificates gnupg -y
RUN curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
RUN apt-get update -y && apt-get install google-cloud-sdk -y


RUN conda update --all
ARG TENSORFLOW_PIP
ARG TENSORPACK_PIP
RUN if [ "$TENSORFLOW_PIP" ]; then python -m pip install $TENSORFLOW_PIP; fi
RUN if [ "$TENSORPACK_PIP" ]; then python -m pip install $TENSORPACK_PIP; fi
RUN python -m pip install GPUtil

ARG TORCH_CUDA_ARCH_LIST="3.7;6.0;6.1;6.2;7.0;7.5"
RUN if [ "$TORCH_PIP" ]; then pip install --no-cache-dir --global-option="--cpp_ext" --global-option="--cuda_ext" git+https://github.com/determined-ai/apex.git@37cdaf4ad57ab4e7dd9ef13dbed7b29aa939d061; fi

ARG HOROVOD_WITH_TENSORFLOW
ARG HOROVOD_WITH_PYTORCH
ARG HOROVOD_GPU_ALLREDUCE=NCCL
ARG HOROVOD_WITHOUT_MPI=1
ARG HOROVOD_NCCL_HOME=/tmp/pedl_nccl/build
ARG HOROVOD_NCCL_LINK=STATIC
RUN git clone https://github.com/determined-ai/nccl.git /tmp/pedl_nccl\
 && (cd /tmp/pedl_nccl && git checkout -q 136b9edbaa8eb5af36db2e0d125fd3e83eec4017)\
 && make -C /tmp/pedl_nccl -j 4\
 && ldconfig /usr/local/cuda/targets/x86_64-linux/lib/stubs \
 && pip install --no-cache-dir git+https://github.com/determined-ai/horovod.git@9664367d2d8e9d1f065030107a595f9de692b6a3\
 && ldconfig\
 && rm -rf /tmp/pedl_nccl

RUN python -m pip install determined determined-cli

# We uninstall these packages after installing. This ensures that we can
# successfully install these packages into containers running as non-root.
# `pip` does not uninstall dependencies, so we still have all the dependencies
# installed.
RUN python -m pip uninstall -y determined determined-cli determined-common

COPY files/additional-requirements.txt files/additional-requirements.txt
RUN python -m pip install -r files/additional-requirements.txt

COPY files/notebook-requirements.txt files/notebook-requirements.txt
RUN python -m pip install -r files/notebook-requirements.txt
ENV JUPYTER_CONFIG_DIR=/run/determined/jupyter/config JUPYTER_DATA_DIR=/run/determined/jupyter/data JUPYTER_RUNTIME_DIR=/run/determined/jupyter/runtime

# Add a det-nobody user. Unlike the traditional nobody user, det-nobody will
# have a HOME directory that exists in order to support tools which require a
# home directory, like gsutil. det-nobody is designed to be an out-of-the-box
# solution for running workloads in unprivileged containers.
RUN groupadd --gid 65533 det-nobody \
  && useradd --create-home --home-dir /tmp/det-nobody --uid 65533 --gid 65533 --shell /bin/bash det-nobody

# Add a plugin to the user system that lets us extend the users available in
# the container at runtime. This is critical for supporting non-root shell,
# which in turn is critical for non-root distributed training.
COPY libnss_determined /tmp/libnss_determined
RUN make -C /tmp/libnss_determined libnss_determined.so.2 install \
  && rm -rf /tmp/libnss_determined \
  && sed -E -i -e 's/^((passwd|shadow|group):.*)/\1 determined/' /etc/nsswitch.conf

RUN python -m pip install ruamel.yaml==0.14.12 --ignore-installed
